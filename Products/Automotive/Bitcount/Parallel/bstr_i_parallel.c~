/* +++Date last modified: 05-Jul-1997 */

/*
**  Make an ascii binary string into an integer.
**
**  Public domain by Bob Stout
*/

#include <string.h>
#include <stdio.h>
#include "bitops.h"
#include "pt_head.h"

int js[PROCESSORS];
char *template ="0000000000000000000000000000000";

unsigned int bstr_i(char *cptr){
	FUNCARGS* funcArgs = (FUNCARGS*)malloc(sizeof(FUNCARGS));
	funcArgs->cptr = cptr;
	startThreads(3,funcArgs);
	free(funcArgs);
	int i,j=0;	
	for(i=0;i<PROCESSORS;i++){
		j+=js[i];
	}
	return(j);
}

/* bstr_i(111 111 111) = bstr_i(111 000 000) + bstr_i(111 000) + bstr_i(111) */
void* bstr_i_thread(void* threadArgs){
	unsigned int i = 0;
	THREADARGS* args = (THREADARGS*)threadArgs;
	int myID = args->id;
	FUNCARGS* funcArgs = args->funcArgs;
	int length = strlen(funcArgs->cptr);
	int byte_start = length/PROCESSORS*myID;
	int byte_end = length/PROCESSORS*(myID+1)+(myID+1==PROCESSORS&&length%PROCESSORS?length%PROCESSORS:0);
	int byte_length = byte_end - byte_start;
	char *cptr = (char*) malloc(sizeof(char)*(length-byte_start+1)); 
	memcpy(cptr,funcArgs->cptr+byte_start,length-byte_start);
	memcpy(cptr+byte_length,template,length-byte_end);
	int x = 0;
	while (cptr && *cptr && strchr("01", *cptr) ){
		i = *cptr++ - '0';
            js[myID] <<= 1;
            js[myID] |= (i & 0x01);
		x++;
	}
	printf("myID=%d,x=%d\n",myID,x);
}

//#ifdef TEST

#include <stdlib.h>

int main(int argc, char *argv[]){
      char *arg;
      unsigned int x;
      while (--argc){
            x = bstr_i(arg = *++argv);
            printf("Binary %s = %d = %04Xh\n", arg, x, x);
     	}
      return EXIT_SUCCESS;
}

//#endif /* TEST */
